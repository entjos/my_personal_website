---
title: "Optimisation of a Linear Regression Model in R"
author: "Joshua Philipp Entrop"
date: "2020-04-26"
categories: [Optimisation, R]
tags: [R, linear regression, manual optimisation]
output: html_document
---

In this post I would like to show how to manually optimise a linear regression model using the <TT>optim()</TT> command in R. Usually if you learn how to fit a linear regression model in R, you would learn how to use the <TT>lm()</TT> command to do this. However, if you would like to know how to do this manually, examples are rare.

If you want to optimise a function, the most important question of course is which function should be optimised? As it is taught in most statistic classes this function is in case of a linear regression model the distribution of the residuals $(R)$. We know that this distribution follows a normal distribution with mean 0 and a unknown standard deviation $\sigma$:

$$\sum_{i = 1}^{i = n} R_i \sim N(0, \sigma)$$

Where $R$ equals:

$$ R_i = y_1 - \hat{y_i} $$

Thus, we are interested in a function for $\hat{y_i}$ which minimises the residuals and hence, gives us the best estimates for the function of interest. Taking all this information together we can write the function we would like to optimise, shown below.

```{r, warning=FALSE}

#Reading the example data set icu from the package aplore3
library(aplore3)
y = icu$sys                 #Set our depended variable
x1 = icu$age                #Set our fist independed variable
x2 = as.numeric(icu$gender) #Set our second independed variable

#Define our liklihood function we like to optimise
ll_lm <- function(par, y, x1, x2){
  
  alpha <- par[1]
  beta1 <- par[2]
  beta2 <- par[3]
  sigma <- par[4]
  
  R = y - alpha - beta1 * x1 - beta2 * x2
  
  -sum(dnorm(R, mean = 0, sigma, log = TRUE))
}

```

A function that can be used for the <TT>optim()</TT> command needs to have a <TT>par</TT> argument, which includes the unknown parameters. The <TT>par</TT> arguments needs a vector with initial values or guesses for all unknown parameters. As shown in the example above the <TT>par</TT> argument includes initial values for all 4 unknown parameters. In this example the first value of the <TT>par</TT> arguments equals $\alpha$, the second $\beta_1$, the third $\beta_2$ and the fourth $\sigma$, which is our unknown standard deviation of the normal distribution of our residuals. Additionally, we included our two independent variables $x_1$ and $x_2$ and our dependent variable y as function arguments in the <TT>optim()</TT> call.

Also note, that I used the <TT>log</TT> argument of the <TT>dnorm()</TT> function to get the logarithmic values of the dnorm function. This is necessary, if we would like to sum the single likelihood values instead of taking the product of them.

The linear model we would like to fit in this example is:

$$ E(Y|\mathbf{X}) = \alpha + \beta_1  x_1 + \beta_2  x_2$$

Hence, the residuals for this model can be calculated as:

$$R = y - \alpha - \beta_1 x_1 - \beta_2 x_2$$

Since we know that these residuals follow a normal distribution with mean 0, we just need to find the standard deviation for the normal distribution of the residuals and the values for our coefficients, that fits best our data. To do this, we would like to minimise the sum of errors. This is done by the <TT>optim()</TT>  command. However, since the <TT>optim()</TT> command always maximises functions, we just need to put a minus before our summation.

Before, we run the <TT>optim()</TT> command we also need to find good guesses for our estimates, since the initial parameter values which are chosen for the optimisation influences our estimates. In this case we just calculate the  conditional means for our subgroups and use them as guess for our coefficients.

```{R}

est_alpha <- mean(icu$sys)
est_beta1 <- mean(icu$sys[icu$age >= 40 & icu$age <= 41]) - mean(icu$sys[icu$age >= 41 & icu$age <= 52])
est_beta2 <- mean(icu$sys[icu$gender == "Male"]) - mean(icu$sys[icu$gender == "Female"])
est_sigma <- sd(icu$sys)

```

Now we can use the <TT>optim()</TT> function to search for our maximum likelihood estimates (mles) for the different coefficients. For the <TT>optim()</TT> function, we need the function we like to optimise, in this case <TT>ll_lm()</TT>, our guesses for the estimates and the empirical data we want to use for the optimisation.

```{R}
mle_par <- optim(fn = ll_lm,                #Function to be optimised
                 par = c(alpha = est_alpha, #Initial values
                         beta1 = est_beta1, 
                         beta2 = est_beta2, 
                         sigma = est_sigma), 
                 y = icu$sys,               #Empirical data from the data set icu
                 x1 = icu$age,
                 x2 = as.numeric(icu$gender))

mle_par$par                                 #Showing estimates for unknown parameters
```

If we now compare our estimates with the results of the <TT>lm()</TT> command for the same model, we can see slight differences in the estimates, which may be due to different optimisation algorithms or due to our initial guesses for the parameters.

```{R}
summary(lm(sys ~ age + as.numeric(gender), data = icu))
```

This approach for a manual optimisation of a linear regression model can also be adopted for other linear regression model with more coefficients. In this case the formula for the residuals needs to be adjusted to the structure of the model that you like to fit.
